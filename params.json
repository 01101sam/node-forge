{"name":"Forge","tagline":"Cryptographic tools written in JavaScript, including a native implementation of TLS","body":"# Forge\r\n\r\n[![Build Status][travis-ci-png]][travis-ci-site]\r\n[travis-ci-png]: https://travis-ci.org/digitalbazaar/forge.png?branch=master\r\n[travis-ci-site]: https://travis-ci.org/digitalbazaar/forge\r\n\r\nA native implementation of [TLS][] (and various other cryptographic tools) in\r\n[JavaScript][].\r\n\r\n## Introduction\r\n\r\nThe Forge software is a fully native implementation of the [TLS][] protocol in\r\nJavaScript as well as a set of tools for developing Web Apps that utilize many\r\nnetwork resources.\r\n\r\n## Performance\r\n\r\nForge is fast. Benchmarks against other popular JavaScript cryptography\r\nlibraries can be found here:\r\n\r\nhttp://dominictarr.github.io/crypto-bench/\r\n\r\nhttp://cryptojs.altervista.org/test/simulate-threading-speed_test.html\r\n\r\n## Getting Started\r\n------------------\r\n\r\n### Node.js ###\r\n\r\nIf you want to use forge with [node.js][], it is available through `npm`:\r\n\r\nhttps://npmjs.org/package/node-forge\r\n\r\nInstallation:\r\n\r\n    npm install node-forge\r\n\r\nYou can then use forge as a regular module:\r\n\r\n    var forge = require('node-forge');\r\n\r\n### Requirements ###\r\n\r\n* General\r\n  * Optional: GNU autotools for the build infrastructure if using Flash.\r\n* Building a Browser Bundle:\r\n  * nodejs\r\n  * npm\r\n* Testing\r\n  * nodejs\r\n  * Optional: Python and OpenSSL development environment to build\r\n  * a special SSL module with session cache support for testing with flash.\r\n  * http://www.python.org/dev/\r\n  * http://www.openssl.org/\r\n  * Debian users should install python-dev and libssl-dev.\r\n* Optional: Flash\r\n  * A pre-built SocketPool.swf is included.\r\n  * Adobe Flex 3 SDK to build the Flash socket code.\r\n  * http://opensource.adobe.com/wiki/display/flexsdk/\r\n\r\n### Building a browser bundle ###\r\n\r\nTo create a minimized JavaScript bundle, run the following:\r\n\r\n```\r\nnpm install\r\nnpm run minify\r\n```\r\n\r\nThis will create a single minimized file that can be included in\r\nthe browser:\r\n\r\n```\r\njs/forge.min.js\r\n```\r\n\r\nInclude the file via:\r\n\r\n```html\r\n<script src=\"js/forge.min.js\"></script>\r\n```\r\n\r\nNote that the minify script depends on the requirejs package,\r\nand that the requirejs binary 'r.js' assumes that the name of\r\nthe node binary is 'node' not 'nodejs', as it is on some\r\nsystems. You may need to change the hashbang line to use\r\n'nodejs' or run the command manually.\r\n\r\nTo create a single non-minimized file that can be included in\r\nthe browser:\r\n\r\n```\r\nnpm install\r\nnpm run bundle\r\n```\r\n\r\nThis will create:\r\n\r\n```\r\njs/forge.bundle.js\r\n```\r\n\r\nInclude the file via:\r\n\r\n```html\r\n<script src=\"js/forge.bundle.js\"></script>\r\n```\r\n\r\nThe above bundles will synchronously create a global 'forge' object.\r\n\r\nKeep in mind that these bundles will not include any WebWorker\r\nscripts (eg: prime.worker.js) or their dependencies, so these will\r\nneed to be accessible from the browser if any WebWorkers are used.\r\n\r\n### Testing with NodeJS & RequireJS ###\r\n\r\nA test server for [node.js][] can be found at `./nodejs`. The following are included:\r\n\r\n  * Example of how to use `forge` within NodeJS in the form of a [mocha](http://visionmedia.github.io/mocha/) test.\r\n  * Example of how to serve `forge` to the browser using [RequireJS](http://requirejs.org/).\r\n\r\nTo run:\r\n\r\n    cd nodejs\r\n    npm install\r\n    npm test\r\n    npm start\r\n\r\n\r\n### Old build system that includes flash support ###\r\n\r\nTo build the whole project, including Flash, run the following:\r\n\r\n    $ ./build-setup\r\n    $ make\r\n\r\nThis will create the SWF, symlink all the JavaScript files, and build a Python\r\nSSL module for testing. To see configure options, run `./configure --help`.\r\n\r\n### Old test system including flash support ###\r\n\r\nA test server is provided which can be run in TLS mode and non-TLS mode. Use\r\nthe --help option to get help for configuring ports. The server will print out\r\nthe local URL you can vist to run tests.\r\n\r\nSome of the simplier tests should be run with just the non-TLS server::\r\n\r\n    $ ./tests/server.py\r\n\r\nMore advanced tests need TLS enabled::\r\n\r\n    $ ./tests/server.py --tls\r\n\r\n## Contributing\r\n---------------\r\n\r\nAny contributions (eg: PRs) that are accepted will be brought under the same\r\nlicense used by the rest of the Forge project. This license allows Forge to\r\nbe used under the terms of either the BSD License or the GNU General Public\r\nLicense (GPL) Version 2.\r\n\r\nSee: [LICENSE](https://github.com/digitalbazaar/forge/blob/cbebca3780658703d925b61b2caffb1d263a6c1d/LICENSE)\r\n\r\nIf a contribution contains 3rd party source code with its own license, it\r\nmay retain it, so long as that license is compatible with the Forge license.\r\n\r\n## Documentation\r\n----------------\r\n\r\n### Transports\r\n\r\n* [TLS](#tls)\r\n* [HTTP](#http)\r\n* [SSH](#ssh)\r\n* [XHR](#xhr)\r\n* [Sockets](#socket)\r\n\r\n### Ciphers\r\n\r\n* [CIPHER](#cipher)\r\n* [AES](#aes)\r\n* [DES](#des)\r\n* [RC2](#rc2)\r\n\r\n### PKI\r\n\r\n* [RSA](#rsa)\r\n* [RSA-KEM](#rsakem)\r\n* [X.509](#x509)\r\n* [PKCS#5](#pkcs5)\r\n* [PKCS#7](#pkcs7)\r\n* [PKCS#8](#pkcs8)\r\n* [PKCS#10](#pkcs10)\r\n* [PKCS#12](#pkcs12)\r\n* [ASN.1](#asn)\r\n\r\n### Message Digests\r\n\r\n* [SHA1](#sha1)\r\n* [SHA256](#sha256)\r\n* [SHA384](#sha384)\r\n* [SHA512](#sha512)\r\n* [MD5](#md5)\r\n* [HMAC](#hmac)\r\n\r\n### Utilities\r\n\r\n* [Prime](#prime)\r\n* [PRNG](#prng)\r\n* [Tasks](#task)\r\n* [Utilities](#util)\r\n* [Logging](#log)\r\n* [Debugging](#debug)\r\n* [Flash Socket Policy Module](#fsp)\r\n\r\n---------------------------------------\r\n\r\nIf at any time you wish to disable the use of native code, where available,\r\nfor particular forge features like its secure random number generator, you\r\nmay set the ```disableNativeCode``` flag on ```forge``` to ```true```. It\r\nis not recommended that you set this flag as native code is typically more\r\nperformant and may have stronger security properties. It may be useful to\r\nset this flag to test certain features that you plan to run in environments\r\nthat are different from your testing environment.\r\n\r\nTo disable native code when including forge in the browser:\r\n\r\n```js\r\nforge = {disableNativeCode: true};\r\n// now include other files\r\n```\r\n\r\nTo disable native code when using node.js:\r\n\r\n```js\r\nvar forge = require('node-forge')({disableNativeCode: true});\r\n```\r\n\r\n---------------------------------------\r\n## Transports\r\n\r\n<a name=\"tls\" />\r\n### TLS\r\n\r\nProvides a native javascript client and server-side [TLS][] implementation.\r\n\r\n__Examples__\r\n\r\n```js\r\n// create TLS client\r\nvar client = forge.tls.createConnection({\r\n  server: false,\r\n  caStore: /* Array of PEM-formatted certs or a CA store object */,\r\n  sessionCache: {},\r\n  // supported cipher suites in order of preference\r\n  cipherSuites: [\r\n    forge.tls.CipherSuites.TLS_RSA_WITH_AES_128_CBC_SHA,\r\n    forge.tls.CipherSuites.TLS_RSA_WITH_AES_256_CBC_SHA],\r\n  virtualHost: 'example.com',\r\n  verify: function(connection, verified, depth, certs) {\r\n    if(depth === 0) {\r\n      var cn = certs[0].subject.getField('CN').value;\r\n      if(cn !== 'example.com') {\r\n        verified = {\r\n          alert: forge.tls.Alert.Description.bad_certificate,\r\n          message: 'Certificate common name does not match hostname.'\r\n        };\r\n      }\r\n    }\r\n    return verified;\r\n  },\r\n  connected: function(connection) {\r\n    console.log('connected');\r\n    // send message to server\r\n    connection.prepare(forge.util.encodeUtf8('Hi server!'));\r\n    /* NOTE: experimental, start heartbeat retransmission timer\r\n    myHeartbeatTimer = setInterval(function() {\r\n      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));\r\n    }, 5*60*1000);*/\r\n  },\r\n  /* provide a client-side cert if you want\r\n  getCertificate: function(connection, hint) {\r\n    return myClientCertificate;\r\n  },\r\n  /* the private key for the client-side cert if provided */\r\n  getPrivateKey: function(connection, cert) {\r\n    return myClientPrivateKey;\r\n  },\r\n  tlsDataReady: function(connection) {\r\n    // TLS data (encrypted) is ready to be sent to the server\r\n    sendToServerSomehow(connection.tlsData.getBytes());\r\n    // if you were communicating with the server below, you'd do:\r\n    // server.process(connection.tlsData.getBytes());\r\n  },\r\n  dataReady: function(connection) {\r\n    // clear data from the server is ready\r\n    console.log('the server sent: ' +\r\n      forge.util.decodeUtf8(connection.data.getBytes()));\r\n    // close connection\r\n    connection.close();\r\n  },\r\n  /* NOTE: experimental\r\n  heartbeatReceived: function(connection, payload) {\r\n    // restart retransmission timer, look at payload\r\n    clearInterval(myHeartbeatTimer);\r\n    myHeartbeatTimer = setInterval(function() {\r\n      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));\r\n    }, 5*60*1000);\r\n    payload.getBytes();\r\n  },*/\r\n  closed: function(connection) {\r\n    console.log('disconnected');\r\n  },\r\n  error: function(connection, error) {\r\n    console.log('uh oh', error);\r\n  }\r\n});\r\n\r\n// start the handshake process\r\nclient.handshake();\r\n\r\n// when encrypted TLS data is received from the server, process it\r\nclient.process(encryptedBytesFromServer);\r\n\r\n// create TLS server\r\nvar server = forge.tls.createConnection({\r\n  server: true,\r\n  caStore: /* Array of PEM-formatted certs or a CA store object */,\r\n  sessionCache: {},\r\n  // supported cipher suites in order of preference\r\n  cipherSuites: [\r\n    forge.tls.CipherSuites.TLS_RSA_WITH_AES_128_CBC_SHA,\r\n    forge.tls.CipherSuites.TLS_RSA_WITH_AES_256_CBC_SHA],\r\n  // require a client-side certificate if you want\r\n  verifyClient: true,\r\n  verify: function(connection, verified, depth, certs) {\r\n    if(depth === 0) {\r\n      var cn = certs[0].subject.getField('CN').value;\r\n      if(cn !== 'the-client') {\r\n        verified = {\r\n          alert: forge.tls.Alert.Description.bad_certificate,\r\n          message: 'Certificate common name does not match expected client.'\r\n        };\r\n      }\r\n    }\r\n    return verified;\r\n  },\r\n  connected: function(connection) {\r\n    console.log('connected');\r\n    // send message to client\r\n    connection.prepare(forge.util.encodeUtf8('Hi client!'));\r\n    /* NOTE: experimental, start heartbeat retransmission timer\r\n    myHeartbeatTimer = setInterval(function() {\r\n      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));\r\n    }, 5*60*1000);*/\r\n  },\r\n  getCertificate: function(connection, hint) {\r\n    return myServerCertificate;\r\n  },\r\n  getPrivateKey: function(connection, cert) {\r\n    return myServerPrivateKey;\r\n  },\r\n  tlsDataReady: function(connection) {\r\n    // TLS data (encrypted) is ready to be sent to the client\r\n    sendToClientSomehow(connection.tlsData.getBytes());\r\n    // if you were communicating with the client above you'd do:\r\n    // client.process(connection.tlsData.getBytes());\r\n  },\r\n  dataReady: function(connection) {\r\n    // clear data from the client is ready\r\n    console.log('the client sent: ' +\r\n      forge.util.decodeUtf8(connection.data.getBytes()));\r\n    // close connection\r\n    connection.close();\r\n  },\r\n  /* NOTE: experimental\r\n  heartbeatReceived: function(connection, payload) {\r\n    // restart retransmission timer, look at payload\r\n    clearInterval(myHeartbeatTimer);\r\n    myHeartbeatTimer = setInterval(function() {\r\n      connection.prepareHeartbeatRequest(forge.util.createBuffer('1234'));\r\n    }, 5*60*1000);\r\n    payload.getBytes();\r\n  },*/\r\n  closed: function(connection) {\r\n    console.log('disconnected');\r\n  },\r\n  error: function(connection, error) {\r\n    console.log('uh oh', error);\r\n  }\r\n});\r\n\r\n// when encrypted TLS data is received from the client, process it\r\nserver.process(encryptedBytesFromClient);\r\n```\r\n\r\nConnect to a TLS server using node's net.Socket:\r\n\r\n```js\r\nvar socket = new net.Socket();\r\n\r\nvar client = forge.tls.createConnection({\r\n  server: false,\r\n  verify: function(connection, verified, depth, certs) {\r\n    // skip verification for testing\r\n    console.log('[tls] server certificate verified');\r\n    return true;\r\n  },\r\n  connected: function(connection) {\r\n    console.log('[tls] connected');\r\n    // prepare some data to send (note that the string is interpreted as\r\n    // 'binary' encoded, which works for HTTP which only uses ASCII, use\r\n    // forge.util.encodeUtf8(str) otherwise\r\n    client.prepare('GET / HTTP/1.0\\r\\n\\r\\n');\r\n  },\r\n  tlsDataReady: function(connection) {\r\n    // encrypted data is ready to be sent to the server\r\n    var data = connection.tlsData.getBytes();\r\n    socket.write(data, 'binary'); // encoding should be 'binary'\r\n  },\r\n  dataReady: function(connection) {\r\n    // clear data from the server is ready\r\n    var data = connection.data.getBytes();\r\n    console.log('[tls] data received from the server: ' + data);\r\n  },\r\n  closed: function() {\r\n    console.log('[tls] disconnected');\r\n  },\r\n  error: function(connection, error) {\r\n    console.log('[tls] error', error);\r\n  }\r\n});\r\n\r\nsocket.on('connect', function() {\r\n  console.log('[socket] connected');\r\n  client.handshake();\r\n});\r\nsocket.on('data', function(data) {\r\n  client.process(data.toString('binary')); // encoding should be 'binary'\r\n});\r\nsocket.on('end', function() {\r\n  console.log('[socket] disconnected');\r\n});\r\n\r\n// connect to google.com\r\nsocket.connect(443, 'google.com');\r\n\r\n// or connect to gmail's imap server (but don't send the HTTP header above)\r\n//socket.connect(993, 'imap.gmail.com');\r\n```\r\n\r\n<a name=\"http\" />\r\n### HTTP\r\n\r\nProvides a native [JavaScript][] mini-implementation of an http client that\r\nuses pooled sockets.\r\n\r\n__Examples__\r\n\r\n```js\r\n// create an HTTP GET request\r\nvar request = forge.http.createRequest({method: 'GET', path: url.path});\r\n\r\n// send the request somewhere\r\nsendSomehow(request.toString());\r\n\r\n// receive response\r\nvar buffer = forge.util.createBuffer();\r\nvar response = forge.http.createResponse();\r\nvar someAsyncDataHandler = function(bytes) {\r\n  if(!response.bodyReceived) {\r\n    buffer.putBytes(bytes);\r\n    if(!response.headerReceived) {\r\n      if(response.readHeader(buffer)) {\r\n        console.log('HTTP response header: ' + response.toString());\r\n      }\r\n    }\r\n    if(response.headerReceived && !response.bodyReceived) {\r\n      if(response.readBody(buffer)) {\r\n        console.log('HTTP response body: ' + response.body);\r\n      }\r\n    }\r\n  }\r\n};\r\n```\r\n\r\n<a name=\"ssh\" />\r\n### SSH\r\n\r\nProvides some SSH utility functions.\r\n\r\n__Examples__\r\n\r\n```js\r\n// encodes (and optionally encrypts) a private RSA key as a Putty PPK file\r\nforge.ssh.privateKeyToPutty(privateKey, passphrase, comment);\r\n\r\n// encodes a public RSA key as an OpenSSH file\r\nforge.ssh.publicKeyToOpenSSH(key, comment);\r\n\r\n// encodes a private RSA key as an OpenSSH file\r\nforge.ssh.privateKeyToOpenSSH(privateKey, passphrase);\r\n\r\n// gets the SSH public key fingerprint in a byte buffer\r\nforge.ssh.getPublicKeyFingerprint(key);\r\n\r\n// gets a hex-encoded, colon-delimited SSH public key fingerprint\r\nforge.ssh.getPublicKeyFingerprint(key, {encoding: 'hex', delimiter: ':'});\r\n```\r\n\r\n<a name=\"xhr\" />\r\n### XHR\r\n\r\nProvides an XmlHttpRequest implementation using forge.http as a backend.\r\n\r\n__Examples__\r\n\r\n```js\r\n```\r\n\r\n<a name=\"socket\" />\r\n### Sockets\r\n\r\nProvides an interface to create and use raw sockets provided via Flash.\r\n\r\n__Examples__\r\n\r\n```js\r\n```\r\n\r\n---------------------------------------\r\n## Ciphers\r\n\r\n<a name=\"cipher\" />\r\n### CIPHER\r\n\r\nProvides a basic API for block encryption and decryption. There is built-in\r\nsupport for the ciphers: [AES][], [3DES][], and [DES][], and for the modes\r\nof operation: [ECB][], [CBC][], [CFB][], [OFB][], [CTR][], and [GCM][].\r\n\r\nThese algorithms are currently supported:\r\n\r\n* AES-CBC\r\n* AES-CFB\r\n* AES-OFB\r\n* AES-CTR\r\n* AES-GCM\r\n* 3DES-ECB\r\n* 3DES-CBC\r\n* DES-ECB\r\n* DES-CBC\r\n\r\nWhen using an [AES][] algorithm, the key size will determine whether\r\nAES-128, AES-192, or AES-256 is used (all are supported). When a [DES][]\r\nalgorithm is used, the key size will determine whether [3DES][] or regular\r\n[DES][] is used. Use a [3DES][] algorithm to enforce Triple-DES.\r\n\r\n__Examples__\r\n\r\n```js\r\n// generate a random key and IV\r\n// Note: a key size of 16 bytes will use AES-128, 24 => AES-192, 32 => AES-256\r\nvar key = forge.random.getBytesSync(16);\r\nvar iv = forge.random.getBytesSync(16);\r\n\r\n/* alternatively, generate a password-based 16-byte key\r\nvar salt = forge.random.getBytesSync(128);\r\nvar key = forge.pkcs5.pbkdf2('password', salt, numIterations, 16);\r\n*/\r\n\r\n// encrypt some bytes using CBC mode\r\n// (other modes include: CFB, OFB, CTR, and GCM)\r\nvar cipher = forge.cipher.createCipher('AES-CBC', key);\r\ncipher.start({iv: iv});\r\ncipher.update(forge.util.createBuffer(someBytes));\r\ncipher.finish();\r\nvar encrypted = cipher.output;\r\n// outputs encrypted hex\r\nconsole.log(encrypted.toHex());\r\n\r\n// decrypt some bytes using CBC mode\r\n// (other modes include: CFB, OFB, CTR, and GCM)\r\nvar decipher = forge.cipher.createDecipher('AES-CBC', key);\r\ndecipher.start({iv: iv});\r\ndecipher.update(encrypted);\r\ndecipher.finish();\r\n// outputs decrypted hex\r\nconsole.log(decipher.output.toHex());\r\n\r\n// encrypt some bytes using GCM mode\r\nvar cipher = forge.cipher.createCipher('AES-GCM', key);\r\ncipher.start({\r\n  iv: iv, // should be a 12-byte binary-encoded string or byte buffer\r\n  additionalData: 'binary-encoded string', // optional\r\n  tagLength: 128 // optional, defaults to 128 bits\r\n});\r\ncipher.update(forge.util.createBuffer(someBytes));\r\ncipher.finish();\r\nvar encrypted = cipher.output;\r\nvar tag = cipher.mode.tag;\r\n// outputs encrypted hex\r\nconsole.log(encrypted.toHex());\r\n// outputs authentication tag\r\nconsole.log(tag.toHex());\r\n\r\n// decrypt some bytes using GCM mode\r\nvar decipher = forge.cipher.createDecipher('AES-GCM', key);\r\ndecipher.start({\r\n  iv: iv,\r\n  additionalData: 'binary-encoded string', // optional\r\n  tagLength: 128, // optional, defaults to 128 bits\r\n  tag: tag // authentication tag from encryption\r\n});\r\ndecipher.update(encrypted);\r\nvar pass = decipher.finish();\r\n// pass is false if there was a failure (eg: authentication tag didn't match)\r\nif(pass) {\r\n  // outputs decrypted hex\r\n  console.log(decipher.output.toHex());\r\n}\r\n```\r\n\r\n<a name=\"aes\" />\r\n### AES\r\n\r\nProvides [AES][] encryption and decryption in [CBC][], [CFB][], [OFB][],\r\n[CTR][], and [GCM][] modes. See [CIPHER](#cipher) for examples.\r\n\r\n<a name=\"des\" />\r\n### DES\r\n\r\nProvides [3DES][] and [DES][] encryption and decryption in [ECB][] and\r\n[CBC][] modes. See [CIPHER](#cipher) for examples.\r\n\r\n<a name=\"rc2\" />\r\n### RC2\r\n\r\n__Examples__\r\n\r\n```js\r\n// generate a random key and IV\r\nvar key = forge.random.getBytesSync(16);\r\nvar iv = forge.random.getBytesSync(8);\r\n\r\n// encrypt some bytes\r\nvar cipher = forge.rc2.createEncryptionCipher(key);\r\ncipher.start(iv);\r\ncipher.update(forge.util.createBuffer(someBytes));\r\ncipher.finish();\r\nvar encrypted = cipher.output;\r\n// outputs encrypted hex\r\nconsole.log(encrypted.toHex());\r\n\r\n// decrypt some bytes\r\nvar cipher = forge.rc2.createDecryptionCipher(key);\r\ncipher.start(iv);\r\ncipher.update(encrypted);\r\ncipher.finish();\r\n// outputs decrypted hex\r\nconsole.log(cipher.output.toHex());\r\n```\r\n---------------------------------------\r\n## PKI\r\n\r\nProvides [X.509][] certificate and RSA public and private key encoding,\r\ndecoding, encryption/decryption, and signing/verifying.\r\n\r\n<a name=\"rsa\" />\r\n### RSA\r\n\r\n__Examples__\r\n\r\n```js\r\nvar rsa = forge.pki.rsa;\r\n\r\n// generate an RSA key pair synchronously\r\nvar keypair = rsa.generateKeyPair({bits: 2048, e: 0x10001});\r\n\r\n// generate an RSA key pair asynchronously (uses web workers if available)\r\n// use workers: -1 to run a fast core estimator to optimize # of workers\r\nrsa.generateKeyPair({bits: 2048, workers: 2}, function(err, keypair) {\r\n  // keypair.privateKey, keypair.publicKey\r\n});\r\n\r\n// generate an RSA key pair in steps that attempt to run for a specified period\r\n// of time on the main JS thread\r\nvar state = rsa.createKeyPairGenerationState(2048, 0x10001);\r\nvar step = function() {\r\n  // run for 100 ms\r\n  if(!rsa.stepKeyPairGenerationState(state, 100)) {\r\n    setTimeout(step, 1);\r\n  }\r\n  else {\r\n    // done, turn off progress indicator, use state.keys\r\n  }\r\n};\r\n// turn on progress indicator, schedule generation to run\r\nsetTimeout(step);\r\n\r\n// sign data with a private key and output DigestInfo DER-encoded bytes\r\n// (defaults to RSASSA PKCS#1 v1.5)\r\nvar md = forge.md.sha1.create();\r\nmd.update('sign this', 'utf8');\r\nvar signature = privateKey.sign(md);\r\n\r\n// verify data with a public key\r\n// (defaults to RSASSA PKCS#1 v1.5)\r\nvar verified = publicKey.verify(md.digest().bytes(), signature);\r\n\r\n// sign data using RSASSA-PSS where PSS uses a SHA-1 hash, a SHA-1 based\r\n// masking function MGF1, and a 20 byte salt\r\nvar md = forge.md.sha1.create();\r\nmd.update('sign this', 'utf8');\r\nvar pss = forge.pss.create({\r\n  md: forge.md.sha1.create(),\r\n  mgf: forge.mgf.mgf1.create(forge.md.sha1.create()),\r\n  saltLength: 20\r\n  // optionally pass 'prng' with a custom PRNG implementation\r\n  // optionalls pass 'salt' with a forge.util.ByteBuffer w/custom salt\r\n});\r\nvar signature = privateKey.sign(md, pss);\r\n\r\n// verify RSASSA-PSS signature\r\nvar pss = forge.pss.create({\r\n  md: forge.md.sha1.create(),\r\n  mgf: forge.mgf.mgf1.create(forge.md.sha1.create()),\r\n  saltLength: 20\r\n  // optionally pass 'prng' with a custom PRNG implementation\r\n});\r\nvar md = forge.md.sha1.create();\r\nmd.update('sign this', 'utf8');\r\npublicKey.verify(md.digest().getBytes(), signature, pss);\r\n\r\n// encrypt data with a public key (defaults to RSAES PKCS#1 v1.5)\r\nvar encrypted = publicKey.encrypt(bytes);\r\n\r\n// decrypt data with a private key (defaults to RSAES PKCS#1 v1.5)\r\nvar decrypted = privateKey.decrypt(encrypted);\r\n\r\n// encrypt data with a public key using RSAES PKCS#1 v1.5\r\nvar encrypted = publicKey.encrypt(bytes, 'RSAES-PKCS1-V1_5');\r\n\r\n// decrypt data with a private key using RSAES PKCS#1 v1.5\r\nvar decrypted = privateKey.decrypt(encrypted, 'RSAES-PKCS1-V1_5');\r\n\r\n// encrypt data with a public key using RSAES-OAEP\r\nvar encrypted = publicKey.encrypt(bytes, 'RSA-OAEP');\r\n\r\n// decrypt data with a private key using RSAES-OAEP\r\nvar decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP');\r\n\r\n// encrypt data with a public key using RSAES-OAEP/SHA-256\r\nvar encrypted = publicKey.encrypt(bytes, 'RSA-OAEP', {\r\n  md: forge.md.sha256.create()\r\n});\r\n\r\n// decrypt data with a private key using RSAES-OAEP/SHA-256\r\nvar decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP', {\r\n  md: forge.md.sha256.create()\r\n});\r\n\r\n// encrypt data with a public key using RSAES-OAEP/SHA-256/MGF1-SHA-1\r\n// compatible with Java's RSA/ECB/OAEPWithSHA-256AndMGF1Padding\r\nvar encrypted = publicKey.encrypt(bytes, 'RSA-OAEP', {\r\n  md: forge.md.sha256.create(),\r\n  mgf1: {\r\n    md: forge.md.sha1.create()\r\n  }\r\n});\r\n\r\n// decrypt data with a private key using RSAES-OAEP/SHA-256/MGF1-SHA-1\r\n// compatible with Java's RSA/ECB/OAEPWithSHA-256AndMGF1Padding\r\nvar decrypted = privateKey.decrypt(encrypted, 'RSA-OAEP', {\r\n  md: forge.md.sha256.create(),\r\n  mgf1: {\r\n    md: forge.md.sha1.create()\r\n  }\r\n});\r\n\r\n```\r\n\r\n<a name=\"rsakem\" />\r\n### RSA-KEM\r\n\r\n__Examples__\r\n\r\n```js\r\n// generate an RSA key pair asynchronously (uses web workers if available)\r\n// use workers: -1 to run a fast core estimator to optimize # of workers\r\nforge.rsa.generateKeyPair({bits: 2048, workers: -1}, function(err, keypair) {\r\n  // keypair.privateKey, keypair.publicKey\r\n});\r\n\r\n// generate and encapsulate a 16-byte secret key\r\nvar kdf1 = new forge.kem.kdf1(forge.md.sha1.create());\r\nvar kem = forge.kem.rsa.create(kdf1);\r\nvar result = kem.encrypt(keypair.publicKey, 16);\r\n// result has 'encapsulation' and 'key'\r\n\r\n// encrypt some bytes\r\nvar iv = forge.random.getBytesSync(12);\r\nvar someBytes = 'hello world!';\r\nvar cipher = forge.cipher.createCipher('AES-GCM', result.key);\r\ncipher.start({iv: iv});\r\ncipher.update(forge.util.createBuffer(someBytes));\r\ncipher.finish();\r\nvar encrypted = cipher.output.getBytes();\r\nvar tag = cipher.mode.tag.getBytes();\r\n\r\n// send 'encrypted', 'iv', 'tag', and result.encapsulation to recipient\r\n\r\n// decrypt encapsulated 16-byte secret key\r\nvar kdf1 = new forge.kem.kdf1(forge.md.sha1.create());\r\nvar kem = forge.kem.rsa.create(kdf1);\r\nvar key = kem.decrypt(keypair.privateKey, result.encapsulation, 16);\r\n\r\n// decrypt some bytes\r\nvar decipher = forge.cipher.createDecipher('AES-GCM', key);\r\ndecipher.start({iv: iv, tag: tag});\r\ndecipher.update(forge.util.createBuffer(encrypted));\r\nvar pass = decipher.finish();\r\n// pass is false if there was a failure (eg: authentication tag didn't match)\r\nif(pass) {\r\n  // outputs 'hello world!'\r\n  console.log(decipher.output.getBytes());\r\n}\r\n\r\n```\r\n\r\n<a name=\"x509\" />\r\n### X.509\r\n\r\n__Examples__\r\n\r\n```js\r\nvar pki = forge.pki;\r\n\r\n// convert a PEM-formatted public key to a Forge public key\r\nvar publicKey = pki.publicKeyFromPem(pem);\r\n\r\n// convert a Forge public key to PEM-format\r\nvar pem = pki.publicKeyToPem(publicKey);\r\n\r\n// convert an ASN.1 SubjectPublicKeyInfo to a Forge public key\r\nvar publicKey = pki.publicKeyFromAsn1(subjectPublicKeyInfo);\r\n\r\n// convert a Forge public key to an ASN.1 SubjectPublicKeyInfo\r\nvar subjectPublicKeyInfo = pki.publicKeyToAsn1(publicKey);\r\n\r\n// gets a SHA-1 RSAPublicKey fingerprint a byte buffer\r\npki.getPublicKeyFingerprint(key);\r\n\r\n// gets a SHA-1 SubjectPublicKeyInfo fingerprint a byte buffer\r\npki.getPublicKeyFingerprint(key, {type: 'SubjectPublicKeyInfo'});\r\n\r\n// gets a hex-encoded, colon-delimited SHA-1 RSAPublicKey public key fingerprint\r\npki.getPublicKeyFingerprint(key, {encoding: 'hex', delimiter: ':'});\r\n\r\n// gets a hex-encoded, colon-delimited SHA-1 SubjectPublicKeyInfo public key fingerprint\r\npki.getPublicKeyFingerprint(key, {\r\n  type: 'SubjectPublicKeyInfo',\r\n  encoding: 'hex',\r\n  delimiter: ':'\r\n});\r\n\r\n// gets a hex-encoded, colon-delimited MD5 RSAPublicKey public key fingerprint\r\npki.getPublicKeyFingerprint(key, {\r\n  md: forge.md.md5.create(),\r\n  encoding: 'hex',\r\n  delimiter: ':'\r\n});\r\n\r\n// creates a CA store\r\nvar caStore = pki.createCaStore([/* PEM-encoded cert */, ...]);\r\n\r\n// add a certificate to the CA store\r\ncaStore.addCertificate(certObjectOrPemString);\r\n\r\n// gets the issuer (its certificate) for the given certificate\r\nvar issuerCert = caStore.getIssuer(subjectCert);\r\n\r\n// verifies a certificate chain against a CA store\r\npki.verifyCertificateChain(caStore, chain, customVerifyCallback);\r\n\r\n// signs a certificate using the given private key\r\ncert.sign(privateKey);\r\n\r\n// signs a certificate using SHA-256 instead of SHA-1\r\ncert.sign(privateKey, forge.md.sha256.create());\r\n\r\n// verifies an issued certificate using the certificates public key\r\nvar verified = issuer.verify(issued);\r\n\r\n// generate a keypair and create an X.509v3 certificate\r\nvar keys = pki.rsa.generateKeyPair(2048);\r\nvar cert = pki.createCertificate();\r\ncert.publicKey = keys.publicKey;\r\ncert.serialNumber = '01';\r\ncert.validity.notBefore = new Date();\r\ncert.validity.notAfter = new Date();\r\ncert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 1);\r\nvar attrs = [{\r\n  name: 'commonName',\r\n  value: 'example.org'\r\n}, {\r\n  name: 'countryName',\r\n  value: 'US'\r\n}, {\r\n  shortName: 'ST',\r\n  value: 'Virginia'\r\n}, {\r\n  name: 'localityName',\r\n  value: 'Blacksburg'\r\n}, {\r\n  name: 'organizationName',\r\n  value: 'Test'\r\n}, {\r\n  shortName: 'OU',\r\n  value: 'Test'\r\n}];\r\ncert.setSubject(attrs);\r\ncert.setIssuer(attrs);\r\ncert.setExtensions([{\r\n  name: 'basicConstraints',\r\n  cA: true\r\n}, {\r\n  name: 'keyUsage',\r\n  keyCertSign: true,\r\n  digitalSignature: true,\r\n  nonRepudiation: true,\r\n  keyEncipherment: true,\r\n  dataEncipherment: true\r\n}, {\r\n  name: 'extKeyUsage',\r\n  serverAuth: true,\r\n  clientAuth: true,\r\n  codeSigning: true,\r\n  emailProtection: true,\r\n  timeStamping: true\r\n}, {\r\n  name: 'nsCertType',\r\n  client: true,\r\n  server: true,\r\n  email: true,\r\n  objsign: true,\r\n  sslCA: true,\r\n  emailCA: true,\r\n  objCA: true\r\n}, {\r\n  name: 'subjectAltName',\r\n  altNames: [{\r\n    type: 6, // URI\r\n    value: 'http://example.org/webid#me'\r\n  }, {\r\n    type: 7, // IP\r\n    ip: '127.0.0.1'\r\n  }]\r\n}, {\r\n  name: 'subjectKeyIdentifier'\r\n}]);\r\n// self-sign certificate\r\ncert.sign(keys.privateKey);\r\n\r\n// convert a Forge certificate to PEM\r\nvar pem = pki.certificateToPem(cert);\r\n\r\n// convert a Forge certificate from PEM\r\nvar cert = pki.certificateFromPem(pem);\r\n\r\n// convert an ASN.1 X.509x3 object to a Forge certificate\r\nvar cert = pki.certificateFromAsn1(obj);\r\n\r\n// convert a Forge certificate to an ASN.1 X.509v3 object\r\nvar asn1Cert = pki.certificateToAsn1(cert);\r\n```\r\n\r\n<a name=\"pkcs5\" />\r\n### PKCS#5\r\n\r\nProvides the password-based key-derivation function from [PKCS#5][].\r\n\r\n__Examples__\r\n\r\n```js\r\n// generate a password-based 16-byte key\r\nvar salt = forge.random.getBytesSync(128);\r\nvar derivedKey = forge.pkcs5.pbkdf2('password', salt, numIterations, 16);\r\n```\r\n\r\n<a name=\"pkcs7\" />\r\n### PKCS#7\r\n\r\nProvides cryptographically protected messages from [PKCS#7][].\r\n\r\n__Examples__\r\n\r\n```js\r\n// convert a message from PEM\r\nvar p7 = forge.pkcs7.messageFromPem(pem);\r\n// look at p7.recipients\r\n\r\n// find a recipient by the issuer of a certificate\r\nvar recipient = p7.findRecipient(cert);\r\n\r\n// decrypt\r\np7.decrypt(p7.recipients[0], privateKey);\r\n\r\n// create a p7 enveloped message\r\nvar p7 = forge.pkcs7.createEnvelopedData();\r\n\r\n// add a recipient\r\nvar cert = forge.pki.certificateFromPem(certPem);\r\np7.addRecipient(cert);\r\n\r\n// set content\r\np7.content = forge.util.createBuffer('Hello');\r\n\r\n// encrypt\r\np7.encrypt();\r\n\r\n// convert message to PEM\r\nvar pem = forge.pkcs7.messageToPem(p7);\r\n\r\n// create a degenerate PKCS#7 certificate container\r\n// (CRLs not currently supported, only certificates)\r\nvar p7 = forge.pkcs7.createSignedData();\r\np7.addCertificate(certOrCertPem1);\r\np7.addCertificate(certOrCertPem2);\r\nvar pem = forge.pkcs7.messageToPem(p7);\r\n```\r\n\r\n<a name=\"pkcs8\" />\r\n### PKCS#8\r\n\r\n__Examples__\r\n\r\n```js\r\nvar pki = forge.pki;\r\n\r\n// convert a PEM-formatted private key to a Forge private key\r\nvar privateKey = pki.privateKeyFromPem(pem);\r\n\r\n// convert a Forge private key to PEM-format\r\nvar pem = pki.privateKeyToPem(privateKey);\r\n\r\n// convert an ASN.1 PrivateKeyInfo or RSAPrivateKey to a Forge private key\r\nvar privateKey = pki.privateKeyFromAsn1(rsaPrivateKey);\r\n\r\n// convert a Forge private key to an ASN.1 RSAPrivateKey\r\nvar rsaPrivateKey = pki.privateKeyToAsn1(privateKey);\r\n\r\n// wrap an RSAPrivateKey ASN.1 object in a PKCS#8 ASN.1 PrivateKeyInfo\r\nvar privateKeyInfo = pki.wrapRsaPrivateKey(rsaPrivateKey);\r\n\r\n// convert a PKCS#8 ASN.1 PrivateKeyInfo to PEM\r\nvar pem = pki.privateKeyInfoToPem(privateKeyInfo);\r\n\r\n// encrypts a PrivateKeyInfo and outputs an EncryptedPrivateKeyInfo\r\nvar encryptedPrivateKeyInfo = pki.encryptPrivateKeyInfo(\r\n  privateKeyInfo, 'password', {\r\n    algorithm: 'aes256', // 'aes128', 'aes192', 'aes256', '3des'\r\n  });\r\n\r\n// decrypts an ASN.1 EncryptedPrivateKeyInfo\r\nvar privateKeyInfo = pki.decryptPrivateKeyInfo(\r\n  encryptedPrivateKeyInfo, 'password');\r\n\r\n// converts an EncryptedPrivateKeyInfo to PEM\r\nvar pem = pki.encryptedPrivateKeyToPem(encryptedPrivateKeyInfo);\r\n\r\n// converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format\r\nvar encryptedPrivateKeyInfo = pki.encryptedPrivateKeyFromPem(pem);\r\n\r\n// wraps and encrypts a Forge private key and outputs it in PEM format\r\nvar pem = pki.encryptRsaPrivateKey(privateKey, 'password');\r\n\r\n// encrypts a Forge private key and outputs it in PEM format using OpenSSL's\r\n// proprietary legacy format + encapsulated PEM headers (DEK-Info)\r\nvar pem = pki.encryptRsaPrivateKey(privateKey, 'password', {legacy: true});\r\n\r\n// decrypts a PEM-formatted, encrypted private key\r\nvar privateKey = pki.decryptRsaPrivateKey(pem, 'password');\r\n\r\n// sets an RSA public key from a private key\r\nvar publicKey = pki.setRsaPublicKey(privateKey.n, privateKey.e);\r\n```\r\n\r\n<a name=\"pkcs10\" />\r\n### PKCS#10\r\n\r\nProvides certification requests or certificate signing requests (CSR) from\r\n[PKCS#10][].\r\n\r\n__Examples__\r\n\r\n```js\r\n// generate a key pair\r\nvar keys = forge.pki.rsa.generateKeyPair(1024);\r\n\r\n// create a certification request (CSR)\r\nvar csr = forge.pki.createCertificationRequest();\r\ncsr.publicKey = keys.publicKey;\r\ncsr.setSubject([{\r\n  name: 'commonName',\r\n  value: 'example.org'\r\n}, {\r\n  name: 'countryName',\r\n  value: 'US'\r\n}, {\r\n  shortName: 'ST',\r\n  value: 'Virginia'\r\n}, {\r\n  name: 'localityName',\r\n  value: 'Blacksburg'\r\n}, {\r\n  name: 'organizationName',\r\n  value: 'Test'\r\n}, {\r\n  shortName: 'OU',\r\n  value: 'Test'\r\n}]);\r\n// set (optional) attributes\r\ncsr.setAttributes([{\r\n  name: 'challengePassword',\r\n  value: 'password'\r\n}, {\r\n  name: 'unstructuredName',\r\n  value: 'My Company, Inc.'\r\n}]);\r\n\r\n// sign certification request\r\ncsr.sign(keys.privateKey);\r\n\r\n// verify certification request\r\nvar verified = csr.verify();\r\n\r\n// convert certification request to PEM-format\r\nvar pem = forge.pki.certificationRequestToPem(csr);\r\n\r\n// convert a Forge certification request from PEM-format\r\nvar csr = forge.pki.certificationRequestFromPem(pem);\r\n```\r\n\r\n<a name=\"pkcs12\" />\r\n### PKCS#12\r\n\r\nProvides the cryptographic archive file format from [PKCS#12][].\r\n\r\n__Examples__\r\n\r\n```js\r\n// decode p12 from base64\r\nvar p12Der = forge.util.decode64(p12b64);\r\n// get p12 as ASN.1 object\r\nvar p12Asn1 = forge.asn1.fromDer(p12Der);\r\n// decrypt p12 using the password 'password'\r\nvar p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, 'password');\r\n// decrypt p12 using literally no password (eg: Mac OS X/apple push)\r\nvar p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1);\r\n// decrypt p12 using an \"empty\" password (eg: OpenSSL with no password input)\r\nvar p12 = forge.pkcs12.pkcs12FromAsn1(p12Asn1, '');\r\n// p12.safeContents is an array of safe contents, each of\r\n// which contains an array of safeBags\r\n\r\n// get bags by friendlyName\r\nvar bags = p12.getBags({friendlyName: 'test'});\r\n\r\n// get bags by localKeyId\r\nvar bags = p12.getBags({localKeyId: buffer});\r\n\r\n// get bags by localKeyId (input in hex)\r\nvar bags = p12.getBags({localKeyIdHex: '7b59377ff142d0be4565e9ac3d396c01401cd879'});\r\n\r\n// get bags by type\r\nvar bags = p12.getBags({bagType: forge.pki.oids.certBag});\r\n// each bag as a 'cert' property with the certificate object\r\nvar cert = bags[0].cert;\r\n\r\n// get bags by friendlyName and filter on bag type\r\nvar bags = p12.getBags({\r\n  friendlyName: 'test',\r\n  bagType: forge.pki.oids.certBag\r\n});\r\n\r\n// generate p12, base64 encode\r\nvar p12Asn1 = forge.pkcs12.toPkcs12Asn1(\r\n  privateKey, certificateChain, 'password');\r\nvar p12Der = forge.asn1.toDer(p12Asn1).getBytes();\r\nvar p12b64 = forge.util.encode64(p12Der);\r\n```\r\n\r\n<a name=\"asn\" />\r\n### ASN.1\r\n\r\nProvides [ASN.1][] DER encoding and decoding.\r\n\r\n__Examples__\r\n\r\n```js\r\nvar asn1 = forge.asn1;\r\n\r\n// create a SubjectPublicKeyInfo\r\nvar subjectPublicKeyInfo =\r\n  asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n    // AlgorithmIdentifier\r\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n      // algorithm\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\r\n        asn1.oidToDer(pki.oids['rsaEncryption']).getBytes()),\r\n      // parameters (null)\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\r\n    ]),\r\n    // subjectPublicKey\r\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [\r\n      // RSAPublicKey\r\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\r\n        // modulus (n)\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\r\n          _bnToBytes(key.n)),\r\n        // publicExponent (e)\r\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\r\n          _bnToBytes(key.e))\r\n      ])\r\n    ])\r\n  ]);\r\n\r\n// serialize an ASN.1 object to DER format\r\nvar derBuffer = asn1.toDer(subjectPublicKeyInfo);\r\n\r\n// deserialize to an ASN.1 object from a byte buffer filled with DER data\r\nvar object = asn1.fromDer(derBuffer);\r\n\r\n// convert an OID dot-separated string to a byte buffer\r\nvar derOidBuffer = asn1.oidToDer('1.2.840.113549.1.1.5');\r\n\r\n// convert a byte buffer with a DER-encoded OID to a dot-separated string\r\nconsole.log(asn1.derToDer(derOidBuffer));\r\n// output: 1.2.840.113549.1.1.5\r\n\r\n// validates that an ASN.1 object matches a particular ASN.1 structure and\r\n// captures data of interest from that structure for easy access\r\nvar publicKeyValidator = {\r\n  name: 'SubjectPublicKeyInfo',\r\n  tagClass: asn1.Class.UNIVERSAL,\r\n  type: asn1.Type.SEQUENCE,\r\n  constructed: true,\r\n  captureAsn1: 'subjectPublicKeyInfo',\r\n  value: [{\r\n    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.SEQUENCE,\r\n    constructed: true,\r\n    value: [{\r\n      name: 'AlgorithmIdentifier.algorithm',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.OID,\r\n      constructed: false,\r\n      capture: 'publicKeyOid'\r\n    }]\r\n  }, {\r\n    // subjectPublicKey\r\n    name: 'SubjectPublicKeyInfo.subjectPublicKey',\r\n    tagClass: asn1.Class.UNIVERSAL,\r\n    type: asn1.Type.BITSTRING,\r\n    constructed: false,\r\n    value: [{\r\n      // RSAPublicKey\r\n      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',\r\n      tagClass: asn1.Class.UNIVERSAL,\r\n      type: asn1.Type.SEQUENCE,\r\n      constructed: true,\r\n      optional: true,\r\n      captureAsn1: 'rsaPublicKey'\r\n    }]\r\n  }]\r\n};\r\n\r\nvar capture = {};\r\nvar errors = [];\r\nif(!asn1.validate(\r\n  publicKeyValidator, subjectPublicKeyInfo, validator, capture, errors)) {\r\n  throw 'ASN.1 object is not a SubjectPublicKeyInfo.';\r\n}\r\n// capture.subjectPublicKeyInfo contains the full ASN.1 object\r\n// capture.rsaPublicKey contains the full ASN.1 object for the RSA public key\r\n// capture.publicKeyOid only contains the value for the OID\r\nvar oid = asn1.derToOid(capture.publicKeyOid);\r\nif(oid !== pki.oids['rsaEncryption']) {\r\n  throw 'Unsupported OID.';\r\n}\r\n\r\n// pretty print an ASN.1 object to a string for debugging purposes\r\nasn1.prettyPrint(object);\r\n```\r\n\r\n---------------------------------------\r\n## Message Digests\r\n\r\n<a name=\"sha1\" />\r\n### SHA1\r\n\r\nProvides [SHA-1][] message digests.\r\n\r\n__Examples__\r\n\r\n```js\r\nvar md = forge.md.sha1.create();\r\nmd.update('The quick brown fox jumps over the lazy dog');\r\nconsole.log(md.digest().toHex());\r\n// output: 2fd4e1c67a2d28fced849ee1bb76e7391b93eb12\r\n```\r\n\r\n<a name=\"sha256\" />\r\n### SHA256\r\n\r\nProvides [SHA-256][] message digests.\r\n\r\n__Examples__\r\n\r\n```js\r\nvar md = forge.md.sha256.create();\r\nmd.update('The quick brown fox jumps over the lazy dog');\r\nconsole.log(md.digest().toHex());\r\n// output: d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592\r\n```\r\n\r\n<a name=\"sha384\" />\r\n### SHA384\r\n\r\nProvides [SHA-384][] message digests.\r\n\r\n__Examples__\r\n\r\n```js\r\nvar md = forge.md.sha384.create();\r\nmd.update('The quick brown fox jumps over the lazy dog');\r\nconsole.log(md.digest().toHex());\r\n// output: ca737f1014a48f4c0b6dd43cb177b0afd9e5169367544c494011e3317dbf9a509cb1e5dc1e85a941bbee3d7f2afbc9b1\r\n```\r\n\r\n<a name=\"sha512\" />\r\n### SHA512\r\n\r\nProvides [SHA-512][] message digests.\r\n\r\n__Examples__\r\n\r\n```js\r\n// SHA-512\r\nvar md = forge.md.sha512.create();\r\nmd.update('The quick brown fox jumps over the lazy dog');\r\nconsole.log(md.digest().toHex());\r\n// output: 07e547d9586f6a73f73fbac0435ed76951218fb7d0c8d788a309d785436bbb642e93a252a954f23912547d1e8a3b5ed6e1bfd7097821233fa0538f3db854fee6\r\n\r\n// SHA-512/224\r\nvar md = forge.md.sha512.sha224.create();\r\nmd.update('The quick brown fox jumps over the lazy dog');\r\nconsole.log(md.digest().toHex());\r\n// output: 944cd2847fb54558d4775db0485a50003111c8e5daa63fe722c6aa37\r\n\r\n// SHA-512/256\r\nvar md = forge.md.sha512.sha256.create();\r\nmd.update('The quick brown fox jumps over the lazy dog');\r\nconsole.log(md.digest().toHex());\r\n// output: dd9d67b371519c339ed8dbd25af90e976a1eeefd4ad3d889005e532fc5bef04d\r\n```\r\n\r\n<a name=\"md5\" />\r\n### MD5\r\n\r\nProvides [MD5][] message digests.\r\n\r\n__Examples__\r\n\r\n```js\r\nvar md = forge.md.md5.create();\r\nmd.update('The quick brown fox jumps over the lazy dog');\r\nconsole.log(md.digest().toHex());\r\n// output: 9e107d9d372bb6826bd81d3542a419d6\r\n```\r\n\r\n<a name=\"hmac\" />\r\n### HMAC\r\n\r\nProvides [HMAC][] w/any supported message digest algorithm.\r\n\r\n__Examples__\r\n\r\n```js\r\nvar hmac = forge.hmac.create();\r\nhmac.start('sha1', 'Jefe');\r\nhmac.update('what do ya want for nothing?');\r\nconsole.log(hmac.digest().toHex());\r\n// output: effcdf6ae5eb2fa2d27416d5f184df9c259a7c79\r\n```\r\n\r\n---------------------------------------\r\n## Utilities\r\n\r\n<a name=\"prime\" />\r\n### Prime\r\n\r\nProvides an API for generating large, random, probable primes.\r\n\r\n__Examples__\r\n\r\n```js\r\n// generate a random prime on the main JS thread\r\nvar bits = 1024;\r\nforge.prime.generateProbablePrime(bits, function(err, num) {\r\n  console.log('random prime', num.toString(16));\r\n});\r\n\r\n// generate a random prime using Web Workers (if available, otherwise\r\n// falls back to the main thread)\r\nvar bits = 1024;\r\nvar options = {\r\n  algorithm: {\r\n    name: 'PRIMEINC',\r\n    workers: -1 // auto-optimize # of workers\r\n  }\r\n};\r\nforge.prime.generateProbablePrime(bits, options, function(err, num) {\r\n  console.log('random prime', num.toString(16));\r\n});\r\n```\r\n\r\n<a name=\"prng\" />\r\n### PRNG\r\n\r\nProvides a [Fortuna][]-based cryptographically-secure pseudo-random number\r\ngenerator, to be used with a cryptographic function backend, ie: [AES][]. An\r\nimplementation using [AES][] as a backend is provided. An API for collecting\r\nentropy is given, though if window.crypto.getRandomValues is available, it will\r\nbe used automatically.\r\n\r\n__Examples__\r\n\r\n```js\r\n// get some random bytes synchronously\r\nvar bytes = forge.random.getBytesSync(32);\r\nconsole.log(forge.util.bytesToHex(bytes));\r\n\r\n// get some random bytes asynchronously\r\nforge.random.getBytes(32, function(err, bytes) {\r\n  console.log(forge.util.bytesToHex(bytes));\r\n});\r\n\r\n// collect some entropy if you'd like\r\nforge.random.collect(someRandomBytes);\r\njQuery().mousemove(function(e) {\r\n  forge.random.collectInt(e.clientX, 16);\r\n  forge.random.collectInt(e.clientY, 16);\r\n});\r\n\r\n// specify a seed file for use with the synchronous API if you'd like\r\nforge.random.seedFileSync = function(needed) {\r\n  // get 'needed' number of random bytes from somewhere\r\n  return fetchedRandomBytes;\r\n};\r\n\r\n// specify a seed file for use with the asynchronous API if you'd like\r\nforge.random.seedFile = function(needed, callback) {\r\n  // get the 'needed' number of random bytes from somewhere\r\n  callback(null, fetchedRandomBytes);\r\n});\r\n\r\n// register the main thread to send entropy or a Web Worker to receive\r\n// entropy on demand from the main thread\r\nforge.random.registerWorker(self);\r\n\r\n// generate a new instance of a PRNG with no collected entropy\r\nvar myPrng = forge.random.createInstance();\r\n```\r\n\r\n<a name=\"task\" />\r\n### Tasks\r\n\r\nProvides queuing and synchronizing tasks in a web application.\r\n\r\n__Examples__\r\n\r\n```js\r\n```\r\n\r\n<a name=\"util\" />\r\n### Utilities\r\n\r\nProvides utility functions, including byte buffer support, base64,\r\nbytes to/from hex, zlib inflate/deflate, etc.\r\n\r\n__Examples__\r\n\r\n```js\r\n// encode/decode base64\r\nvar encoded = forge.util.encode64(str);\r\nvar str = forge.util.decode64(decoded);\r\n\r\n// encode/decode UTF-8\r\nvar encoded = forge.util.encodeUtf8(str);\r\nvar str = forge.util.decodeUtf8(decoded);\r\n\r\n// bytes to/from hex\r\nvar bytes = forge.util.hexToBytes(hex);\r\nvar hex = forge.util.bytesToHex(bytes);\r\n\r\n// create an empty byte buffer\r\nvar buffer = forge.util.createBuffer();\r\n// create a byte buffer from raw binary bytes\r\nvar buffer = forge.util.createBuffer(input, 'raw');\r\n// create a byte buffer from utf8 bytes\r\nvar buffer = forge.util.createBuffer(input, 'utf8');\r\n\r\n// get the length of the buffer in bytes\r\nbuffer.length();\r\n// put bytes into the buffer\r\nbuffer.putBytes(bytes);\r\n// put a 32-bit integer into the buffer\r\nbuffer.putInt32(10);\r\n// buffer to hex\r\nbuffer.toHex();\r\n// get a copy of the bytes in the buffer\r\nbytes.bytes(/* count */);\r\n// empty this buffer and get its contents\r\nbytes.getBytes(/* count */);\r\n\r\n// convert a forge buffer into a node.js Buffer\r\n// make sure you specify the encoding as 'binary'\r\nvar forgeBuffer = forge.util.createBuffer();\r\nvar nodeBuffer = new Buffer(forgeBuffer.getBytes(), 'binary');\r\n\r\n// convert a node.js Buffer into a forge buffer\r\n// make sure you specify the encoding as 'binary'\r\nvar nodeBuffer = new Buffer();\r\nvar forgeBuffer = forge.util.createBuffer(nodeBuffer.toString('binary'));\r\n\r\n// parse a URL\r\nvar parsed = forge.util.parseUrl('http://example.com/foo?bar=baz');\r\n// parsed.scheme, parsed.host, parsed.port, parsed.path, parsed.fullHost\r\n```\r\n\r\n<a name=\"log\" />\r\n### Logging\r\n\r\nProvides logging to a javascript console using various categories and\r\nlevels of verbosity.\r\n\r\n__Examples__\r\n\r\n```js\r\n```\r\n\r\n<a name=\"debug\" />\r\n### Debugging\r\n\r\nProvides storage of debugging information normally inaccessible in\r\nclosures for viewing/investigation.\r\n\r\n__Examples__\r\n\r\n```js\r\n```\r\n\r\n<a name=\"fsp\" />\r\n### Flash Socket Policy Module\r\n\r\nProvides an [Apache][] module \"mod_fsp\" that can serve up a Flash Socket\r\nPolicy. See `mod_fsp/README` for more details. This module makes it easy to\r\nmodify an [Apache][] server to allow cross domain requests to be made to it.\r\n\r\n\r\nLibrary Details\r\n---------------\r\n\r\n* http://digitalbazaar.com/2010/07/20/javascript-tls-1/\r\n* http://digitalbazaar.com/2010/07/20/javascript-tls-2/\r\n\r\nContact\r\n-------\r\n\r\n* Code: https://github.com/digitalbazaar/forge\r\n* Bugs: https://github.com/digitalbazaar/forge/issues\r\n* Email: support@digitalbazaar.com\r\n\r\n[AES]: http://en.wikipedia.org/wiki/Advanced_Encryption_Standard\r\n[ASN.1]: http://en.wikipedia.org/wiki/ASN.1\r\n[Apache]: http://httpd.apache.org/\r\n[CFB]: http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\r\n[CBC]: http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\r\n[CTR]: http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\r\n[3DES]: http://en.wikipedia.org/wiki/Triple_DES\r\n[DES]: http://en.wikipedia.org/wiki/Data_Encryption_Standard\r\n[ECB]: http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\r\n[Fortuna]: http://en.wikipedia.org/wiki/Fortuna_(PRNG)\r\n[GCM]: http://en.wikipedia.org/wiki/GCM_mode\r\n[HMAC]: http://en.wikipedia.org/wiki/HMAC\r\n[JavaScript]: http://en.wikipedia.org/wiki/JavaScript\r\n[MD5]: http://en.wikipedia.org/wiki/MD5\r\n[OFB]: http://en.wikipedia.org/wiki/Block_cipher_mode_of_operation\r\n[PKCS#5]: http://en.wikipedia.org/wiki/PKCS\r\n[PKCS#7]: http://en.wikipedia.org/wiki/Cryptographic_Message_Syntax\r\n[PKCS#10]: http://en.wikipedia.org/wiki/Certificate_signing_request\r\n[PKCS#12]: http://en.wikipedia.org/wiki/PKCS_%E2%99%AF12\r\n[RC2]: http://en.wikipedia.org/wiki/RC2\r\n[SHA-1]: http://en.wikipedia.org/wiki/SHA-1\r\n[SHA-256]: http://en.wikipedia.org/wiki/SHA-256\r\n[SHA-384]: http://en.wikipedia.org/wiki/SHA-384\r\n[SHA-512]: http://en.wikipedia.org/wiki/SHA-512\r\n[TLS]: http://en.wikipedia.org/wiki/Transport_Layer_Security\r\n[X.509]: http://en.wikipedia.org/wiki/X.509\r\n[node.js]: http://nodejs.org/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}